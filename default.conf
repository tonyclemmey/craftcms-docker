server {

    # HTTP
    listen   80; ## listen for ipv4; this line is default and implied
    listen   [::]:80 default ipv6only=on; ## listen for ipv6

    # HTTPS
    listen   443 ssl;
    listen   [::]:443 ssl;

    # SSL
    ssl_certificate     /etc/ssl/mysite.test.crt;
    ssl_certificate_key /etc/ssl/mysite.test.key;
    ssl_protocols TLSv1.3 TLSv1.2;

    # Server name and document/webroot (localhost or domain.com)
    server_name mysite.test;
    root /usr/share/nginx/web;
    index index.php index.html index.htm;
    charset utf-8;

    # Disable sendfile as per https://docs.vagrantup.com/v2/synced-folders/virtualbox.html
    sendfile off;

    # Enable server-side includes as per: http://nginx.org/en/docs/http/ngx_http_ssi_module.html
    ssi on;

    # Disable reading of Apache .htaccess files
    location ~ /\.ht {
        deny all;
    }

    # Set client body size to 200M
    client_max_body_size 200m;

    # Security - Hide nginx version number in error pages and Server header
    server_tokens off;

    error_page 404 /index.php;

    # Redirect server error pages to the static page /50x.html
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/web;
    }

    # Reduce the data that needs to be sent over network
    gzip on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_disable "MSIE [1-6]\.";

    # Add stdout logging
    error_log /dev/stdout info;
    access_log /dev/stdout;

    # Pass the PHP scripts to FastCGI server listening on socket
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/run/php/php7.4-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    location ~ ^(.*)$ {
        try_files $uri $uri/ /index.php?p=$uri&$args;
    }

    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|ttf|ttc|otf|eot|woff)$ {
        try_files $uri /index.php?$query_string;
        expires max;
        add_header Pragma public;
        add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    }

    location ~* \.(?:css|js)$ {
        try_files $uri /index.php?$query_string;
        expires 1y;
        add_header Cache-Control "public";
    }

    location = /robots.txt  { access_log off; log_not_found off; }
    location = /favicon.ico { access_log off; log_not_found off; }
    location ~ /\. { access_log off; log_not_found off; deny all; }

    location ~* (?:\.(?:bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)|~)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Craft-specific location handlers to ensure AdminCP requests route through index.php
    # If you change your `cpTrigger`, change it here as well
    location ^~ /admin {
        try_files $uri $uri/ /index.php?$query_string;
    }
    location ^~ /cpresources {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Craft dir (craft htaccess equiv)
    location /usr/share/nginx/craft {
        deny all;
        return 404;
    }

    # Web dir (web htaccess equiv)/ Root directory location handler
    location / {
        rewrite ^(.*)$ https://$server_name$request_uri redirect;
        if (!-e $request_filename){
         rewrite ^(.+)$ /index.php?p=$1 break;
        }
        try_files $uri/index.html $uri $uri/ /index.php?$query_string;
    }

    # Web assets dir (web assets htaccess equiv)
    location /assets/js {
      rewrite ^/(js|css)?/(.+)\.v(.+)\.(js|css)$ /$1/$2.$4 break;
    }
    location /assets/css {
      rewrite ^/(js|css)?/(.+)\.v(.+)\.(js|css)$ /$1/$2.$4 break;
    }
    location /assets/ {
      rewrite ^/(.+)\.v(.+)\.(js|css)$ /$1.$3 break;
    }

}